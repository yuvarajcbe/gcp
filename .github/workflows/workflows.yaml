name: 'Terraform CI-yuvi'

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # Checks that all Terraform configuration files adhere to a canonical format
   #- name: Terraform Format
   #   run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    -  name: Setup SSH Keys and known_hosts
       env:
         SSH_AUTH_SOCK: "{{ SSH_PUBLIC_KEY }}"
        run: |
            ssh-agent -a $SSH_AUTH_SOCK > /dev/null
            ssh-add - <<< "${{ SSH_PUBLIC_KEY }}"
      


    #  On push to main, build or change infrastructure according to Terraform configuration files
    #   Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
  #  - name: Terraform Apply
  #    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
  #    run: terraform destroy -auto-approve
  #    env:
  #      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
       #GIT_SSH_COMMAND: "echo '${{ secrets.SSH_PUBLIC_KEY }}' > id_rsa.pub

#       && echo 'github.com ssh-rsa ${{ env.GITHUB_COM_SSH_RSA_PUBLIC_KEY }}' > known_hosts
#         && chmod 400 id_rsa known_hosts
#         && ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts"

-   name: Setup SSH Keys and known_hosts
                env:
                    SSH_AUTH_SOCK: /tmp/ssh_agent.sock
                run: |
                    ssh-agent -a $SSH_AUTH_SOCK > /dev/null
                    ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"